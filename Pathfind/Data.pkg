 000000831 float4x4 world_view_projection : WORLDVIEWPROJECTION : register(c0);

struct Vertex
{
	float4 position : POSITION0;
	float4 color : COLOR0;
	float2 texture_coordinate : TEXCOORD0;
};

Vertex MainBasic(Vertex vertex_input)
{
    Vertex vertex_output = (Vertex) 0;

	//Multiplicando a posição com a matriz que contém os valores de World View Projection já multiplicados e transformando a posição para o Screen Space
	vertex_output.position = mul(float4(vertex_input.position),world_view_projection);

	vertex_output.color = vertex_input.color;

	return vertex_output;
}

Vertex MainTexture(Vertex vertex_input)
{
	Vertex vertex_output = MainBasic(vertex_input);

	//Obtendo as coordenadas da textura antes de passar para a próxima fase
	vertex_output.texture_coordinate = vertex_input.texture_coordinate;

    return vertex_output;
} 000001627 sampler2D texture_sample : register(s0);
float invert_color : register(c0);
float gray_scale : register(c1);
float turn_horizontal : register(c2);
float turn_vertical : register(c3);
float pixelate_grid_size : register(c4);

//Pegar os pixels em volta com os vizinhos para fazer o efeito de Pixelate
float4 Pixelate(float2 texture_coordinate : TEXCOORD0) : COLOR0
{
	//Tamanho do bloco
	float2 block_size_percent = 1.0f / pixelate_grid_size;

	//Quantidade de blocos que será coberto
	float2 block_number = floor(texture_coordinate / block_size_percent);

	//Encontrar o centro do bloco
	float2 block_center = (block_number * block_size_percent) + (block_size_percent / 2.0f);

	//Cor final do centro do bloco
	return tex2D(texture_sample,block_center);
}
	
float4 MainBasic(float4 color : COLOR0) : COLOR0
{
	if (invert_color == 1.0f)
		color.rgb = (1.0f - color.rgb);

	if (gray_scale == 1.0f)
		color.rgb = dot(color.rgb,float3(0.30f,0.59f,0.11f));

	return color;
}

float4 MainTexture(float4 color : COLOR0,float2 texture_coordinate : TEXCOORD0) : COLOR0
{
	if (turn_horizontal > 0.0f)
		texture_coordinate.x = saturate(turn_horizontal - texture_coordinate.x);

	if (turn_vertical > 0.0f)
		texture_coordinate.y = saturate(turn_vertical - texture_coordinate.y);

	//Obter a cor da textura com base na coordenada da textura
	float4 texture_color = tex2D(texture_sample,texture_coordinate);

	//Pixelate
	if (pixelate_grid_size > 0.0f)
		texture_color = Pixelate(texture_coordinate);

	//Cor da textura aplicando a cor de entrada
	return MainBasic(texture_color * color);
}